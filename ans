# 1. Create the Thing class and an object example
class Thing:
    pass

example = Thing()

# Print both Thing class and example object
print(Thing)
print(example)

# The printed values will be different. The first one is the class itself, and the second one is the instance of the class.

# 2. Create the Thing2 class with a class attribute letters
class Thing2:
    letters = 'abc'

# Print the class attribute letters
print(Thing2.letters)

# 3. Create the Thing3 class with an instance attribute letters
class Thing3:
    def __init__(self):
        self.letters = 'xyz'

# Create an object from the class and print its letters attribute
thing3_obj = Thing3()
print(thing3_obj.letters)

# You need to create an object from the class to access the instance attribute.

# 4. Create the Element class with instance attributes name, symbol, and number
class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

# Create an object from the Element class
hydrogen = Element('Hydrogen', 'H', 1)

# 5. Create hydrogen object using a dictionary
element_data = {'name': 'Hydrogen', 'symbol': 'H', 'number': 1}
hydrogen = Element(**element_data)

# 6. Define a dump method in Element class and print hydrogen's attributes
class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

    def dump(self):
        print(f"Name: {self.name}, Symbol: {self.symbol}, Number: {self.number}")

hydrogen = Element('Hydrogen', 'H', 1)
hydrogen.dump()

# 7. Change dump to __str__ and print hydrogen
class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

    def __str__(self):
        return f"Name: {self.name}, Symbol: {self.symbol}, Number: {self.number}"

hydrogen = Element('Hydrogen', 'H', 1)
print(hydrogen)

# 8. Modify Element to make attributes private and define getter properties
class Element:
    def __init__(self, name, symbol, number):
        self._name = name
        self._symbol = symbol
        self._number = number

    @property
    def name(self):
        return self._name

    @property
    def symbol(self):
        return self._symbol

    @property
    def number(self):
        return self._number

# 9. Define Bear, Rabbit, and Octothorpe classes with eats method
class Bear:
    def eats(self):
        return 'berries'

class Rabbit:
    def eats(self):
        return 'clover'

class Octothorpe:
    def eats(self):
        return 'campers'

# Create objects and print what they eat
bear = Bear()
rabbit = Rabbit()
octothorpe = Octothorpe()

print(f"Bear eats: {bear.eats()}")
print(f"Rabbit eats: {rabbit.eats()}")
print(f"Octothorpe eats: {octothorpe.eats()}")

# 10. Define Laser, Claw, SmartPhone, and Robot classes
class Laser:
    def does(self):
        return 'disintegrate'

class Claw:
    def does(self):
        return 'crush'

class SmartPhone:
    def does(self):
        return 'ring'

class Robot:
    def __init__(self):
        self.laser = Laser()
        self.claw = Claw()
        self.smartphone = SmartPhone()

    def does(self):
        print(f"Laser: {self.laser.does()}, Claw: {self.claw.does()}, Smartphone: {self.smartphone.does()}")

# Create a Robot object and call its does method
robot = Robot()
robot.does()
